"""
Django settings for spicebot project.

Generated by 'django-admin startproject' using Django 2.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

from __future__ import absolute_import
import os
from decouple import config
import redis
from celery.schedules import crontab
import psycopg2
import base64


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


def decipher(value):
    return base64.b64decode(value.encode()).decode().strip()


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'zu_jn)inc@e5-#@8$mujfto*c^5a(z+e@e(zy00tg4y@dfsa8r'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'main',
    'bridge',
    'sphere',
    'rest_framework',
    'rest_framework.authtoken',
    'constance',
    'constance.backends.database',
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

REST_FRAMEWORK = {
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'burst': '50/min',
        'anon': '100/day',
        'user': '1000/day'
    },
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication'
    ]
}

ROOT_URLCONF = 'spicebot.urls'

CORS_ORIGIN_WHITELIST = [
    'https://spicemetrics.scibizinformatics.com',
    'https://spicemetrics-staging.scibizinformatics.com',
    'https://spice.network',
    'https://spicefeed-dev.scibizinformatics.com',
    'https://spicefeed-staging.scibizinformatics.com'
]

if DEBUG:
    CORS_ORIGIN_WHITELIST.append('http://localhost:5555')
    CORS_ORIGIN_WHITELIST.append('http://localhost:8080')
    CORS_ORIGIN_WHITELIST.append('http://localhost:3000')
    CORS_ORIGIN_WHITELIST.append('http://localhost:8000')
    
CORS_ALLOW_CREDENTIALS = True

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'constance.context_processors.config',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'spicebot.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

POSTGRES_DB = decipher(config('POSTGRES_DB'))
POSTGRES_HOST = decipher(config('POSTGRES_HOST'))
POSTGRES_PORT = decipher(config('POSTGRES_PORT'))
POSTGRES_USER = decipher(config('POSTGRES_USER'))
POSTGRES_PASSWORD = decipher(config('POSTGRES_PASSWORD'))

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': POSTGRES_DB,
        'HOST': POSTGRES_HOST,
        'PORT': POSTGRES_PORT,
        'USER': POSTGRES_USER,
        'PASSWORD': POSTGRES_PASSWORD,
        'OPTIONS': {
            'isolation_level': psycopg2.extensions.ISOLATION_LEVEL_SERIALIZABLE,
        }
    }
}
DATABASE_ROUTERS = []

# SPHERE SETUP
if 'sphere' in INSTALLED_APPS:
    # Don't forget to create the database first.
    SPHERE_DB = decipher(config('SPHERE_DB'))
    DATABASES['sphere_db'] = {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': SPHERE_DB,
        'HOST': POSTGRES_HOST,
        'PORT': POSTGRES_PORT,
        'USER': POSTGRES_USER,
        'PASSWORD': POSTGRES_PASSWORD,
        'OPTIONS': {
            'isolation_level': psycopg2.extensions.ISOLATION_LEVEL_SERIALIZABLE,
        }
    }
    DATABASE_ROUTERS.append('routers.sphere.SphereRouter')

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    }
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Logging settings

DJANGO_LOG_LEVEL = 'INFO'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            'format': '[%(asctime)s %(name)s] %(levelname)s [%(pathname)s:%(lineno)d] - %(message)s',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'console'
        },
    },
    'loggers': {
        '': {
            'level': 'WARNING',
            'handlers': ['console'],
            'propagate': False
        },
        'django': {
            'handlers': ['console'],
            'level': DJANGO_LOG_LEVEL,
            'propagate': False
        },
        'main': {
            'handlers': ['console'],
            'level': DJANGO_LOG_LEVEL,
            'propagate': False
        },
        'bridge': {
            'handlers': ['console'],
            'level': DJANGO_LOG_LEVEL,
            'propagate': False
        },
        'django.template': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False
        }
    },
}


DEPLOYMENT_INSTANCE = decipher(config('DEPLOYMENT_INSTANCE'))


# Celery settings
REDIS_HOST = decipher(config('REDIS_HOST', default='localhost'))
REDIS_PASSWORD = decipher(config('REDIS_PASSWORD', default=''))
REDIS_PORT = decipher(config('REDIS_PORT', default=6379))

CELERY_IMPORTS = ('main.tasks',)

DB_NUM = [0,1,3]
DOMAIN = 'https://spicebot.scibizinformatics.com'
if DEPLOYMENT_INSTANCE == 'dev':
    DB_NUM = [4,5,6]
    DOMAIN = 'https://spicebot-dev.scibizinformatics.com'
if DEPLOYMENT_INSTANCE == 'staging':
    DB_NUM = [7,8,9]
    DOMAIN = 'https://spicebot-staging.scibizinformatics.com'


CONSTANCE_BACKEND = 'constance.backends.database.DatabaseBackend'



if REDIS_PASSWORD:
    CELERY_BROKER_URL = 'redis://user:%s@%s:%s/%s' % (REDIS_PASSWORD, REDIS_HOST, REDIS_PORT, DB_NUM[0])
    CELERY_RESULT_BACKEND = 'redis://user:%s@%s:%s/%s' % (REDIS_PASSWORD, REDIS_HOST, REDIS_PORT, DB_NUM[1])

    REDISKV = redis.StrictRedis(
        host=REDIS_HOST,
        password=REDIS_PASSWORD,
        port=6379,
        db=DB_NUM[2]
    )

else:
    CELERY_BROKER_URL = 'redis://%s:%s/%s' % (REDIS_HOST, REDIS_PORT, DB_NUM[0])
    CELERY_RESULT_BACKEND = 'redis://%s:%s/%s' % (REDIS_HOST, REDIS_PORT, DB_NUM[1])

    REDISKV = redis.StrictRedis(
        host=REDIS_HOST,
        port=6379,
        db=DB_NUM[2]
    )
    

CELERY_TASK_ACKS_LATE = True
CELERYD_PREFETCH_MULTIPLIER = 1
CELERYD_MAX_TASKS_PER_CHILD = 5

CELERY_BEAT_SCHEDULE = {
    # 'check-block-height': {
    #     'task': 'main.tasks.block_height_checker',
    #     'schedule': 60
    # },
    # 'check-reddit-message': {
    #     'task': 'main.tasks.check_reddit_messages',
    #     'schedule': 80
    # },
    # 'check-twitter-mentions': {
    #    'task': 'main.tasks.check_twitter_mentions',
    #    'schedule': 90
    # },
    # 'check-twitter-messages': {
    #     'task': 'main.tasks.check_twitter_messages',
    #     'schedule': 90
    # },
    # 'check-twitter-posts': {
    #     'task': 'main.tasks.twitter_unreplied_post',
    #     'schedule': 30
    # },
    # 'check-reddit-posts': {
    #     'task': 'main.tasks.reddit_unreplied_post',
    #     'schedule': 30
    # },
    # 'check-pending-media': {
    #     'task': 'main.tasks.check_pending_media',
    #     'schedule': 80
    # },
    'check-pending-withdrawals': {
         'task': 'main.tasks.check_pending_withdrawals',
         'schedule': 10
    },
    'check-deposit-confirmations': {
         'task': 'main.tasks.check_deposit_confirmations',
         'schedule': 120
    },
    'negative_balance': {
         'task': 'main.tasks.negative_balance',
         'schedule': 1800
    },
    #  'stats-weekly-report': {
    #      'task': 'main.tasks.stats_weekly_report',
    #      'schedule': crontab(hour=9, minute=30, day_of_week=1)
    # },
    # 'process-reddit-mentions': {
    #      'task': 'main.tasks.process_reddit_mentions',
    #      'schedule': 125
    # },
    # 'check-expired-mute': {
    #     'task': 'main.tasks.check_mute_expiration',
    #     'schedule': 60
    # },
    'record-metrics': {
        'task': 'main.tasks.record_metrics',
        'schedule': crontab(hour=23, minute=50)
    },
}

# Slack Bot settings
SLACK_CLIENT_ID = decipher(config('SLACK_CLIENT_ID', default=''))
SLACK_CLIENT_SECRET = decipher(config('SLACK_CLIENT_SECRET', default=''))
SLACK_VERIFICATION_TOKEN = decipher(config('SLACK_VERIFICATION_TOKEN', default=''))
SLACK_BOT_USER_TOKEN = decipher(config('SLACK_BOT_USER_TOKEN', default=''))
SLACK_METRIC_CHANNEL = decipher(config('SLACK_METRIC_CHANNEL', default=''))

#  Slack Support Bot settings
SLACK_TECHSUPPORT_BOT_TOKEN = decipher(config('SLACK_TECHSUPPORT_BOT_TOKEN', default=''))
SLACK_TECHSUPPORT_CHANNEL_ID = decipher(config('SLACK_TECHSUPPORT_CHANNEL_ID', default=''))

# Telegram bot settings
TELEGRAM_BOT_TOKEN = decipher(config('TELEGRAM_BOT_TOKEN', default=''))
TELEGRAM_BOT_USER = decipher(config('TELEGRAM_BOT_USER', default=''))


# Twitter bot settings
TWITTER_CONSUMER_KEY = decipher(config('TWITTER_CONSUMER_KEY', default=''))
TWITTER_CONSUMER_SECRET = decipher(config('TWITTER_CONSUMER_SECRET', default=''))
TWITTER_ACCESS_KEY = decipher(config('TWITTER_ACCESS_KEY', default=''))
TWITTER_ACCESS_SECRET = decipher(config('TWITTER_ACCESS_SECRET', default=''))
TWITTER_BOT_NAME = decipher(config('TWITTER_BOT_NAME', default=''))

# Reddit bot settings
REDDIT_CLIENT_ID = decipher(config('REDDIT_CLIENT_ID', default=''))
REDDIT_CLIENT_SECRET = decipher(config('REDDIT_CLIENT_SECRET', default=''))
REDDIT_USERNAME = decipher(config('REDDIT_USERNAME', default=''))
REDDIT_PASSWORD = decipher(config('REDDIT_PASSWORD', default=''))
REDDIT_USER_AGENT = decipher(config('REDDIT_USER_AGENT', default=''))

SPICE_SLP_ADDRESS = decipher(config('SPICE_FUNDING_SLP_ADDR', default=''))
SPICE_TOKEN_ID = decipher(config('SPICE_TOKEN_ID', default=''))

RECAPTCHA_SECRET = decipher(config('RECAPTCHA_SECRET', default=''))
PARENT_XPUBKEY = decipher(config('PARENT_XPUBKEY', default=''))

FAUCET_DAILY_LIMIT = 5000

# values in this dict are duration added to pillory a muted user (in minutes)
ALLOWED_PILLORY_EMOJIS = {
    "\U0001f345": 5, # tomato
    "\U0001f34c": 8, # banana
    "\U0001f955": 13, # carrot
    "\U0001f33d": 21, # corn
    "\U0001f34e": 34, # red apple
    "\U0001f96d": 48, # mango
    "\U0001f34d": 54, # pineapple
    "\U0001f349": 60, # watermelon
    "\U0001f32d": 75, # hotdog
    "\U0001f32e": 86, # taco
    "\U0001f354": 100, # hamburger
    "\U0001f969": 120, # 🥩 (meat)
    "\U0001f356": 180, # 🍖 (meat on bone)
    "\U0001f4a9": 420, # poop
    "\U0001f987": 10080, # bat (lasts for 1 week)
}

# values in this dict are duration lessened to a muted user (in minutes)
ALLOWED_UNMUTE_EMOJIS = {
    "\U00002764\ufe0f": 5, # ❤️ (red heart)
    "\U0001f9e1": 8, # 🧡 (orange heart)
    "\U0001f49b": 13, # 💛 (yellow heart)
    "\U0001f49a": 21, # 💚 (green heart)
    "\U0001f499": 34, # 💙 (blue heart)
    "\U0001f49c": 50, # 💜 (violet/purple heart)
    "\U0001f5a4": 60, # 🖤 (black heart)
    "\U0001f495": 120, # 💕 (two hearts)
    "\U0001f48b": 240, # 💋 (kiss)
    "\U0001f607": 420, # 😇 (angel face)
}



POF_SYMBOLS = {
    0: "\U0001F966",
    1: "\U0001F954",
    2: "\U0001F31E",
    3: "\u2668",
    4: "\U0001F321",
    5: "\U0001F525",
    6: "\U0001F4A6"
}


HOOK_EVENTS = {
    # 'any.event.name'  :      'App.Model.Action' (created/updated/deleted)
    'content.created'   :      'main.Content.created',
    'content.updated'   :      'main.Content.updated+',
    'user.created'      :      'main.User.created',
    'user.updated'             :   'main.User.updated+',
    'telegram_group.created'   :   'main.TelegramGroup.created',
    'telegram_group.updated'   :   'main.TelegramGroup.updated+',
    'media.created'            :   'main.Media.created',
    'slp_token.created'        :   'main.SLPToken.created',
    'slp_token.updated'        :   'main.SLPToken.updated+'  
}

if DEPLOYMENT_INSTANCE == 'staging' or DEPLOYMENT_INSTANCE == 'dev':
    HOOK_TARGET =  'https://spicefeedhub-staging.scibizinformatics.com'
    MUTE_MANAGER_TOKEN = 'token012'
    TWITTER_WITHDRAWAL_ACCESS_KEY=''
else:
    HOOK_TARGET =  'https://spicefeedhub.scibizinformatics.com'
    MUTE_MANAGER_TOKEN = '28661c1b-f9c4-49'

    TWITTER_WITHDRAWAL_CONSUMER_KEY='ezUI5vvVctKy90qTt11nTWHRN'
    TWITTER_WITHDRAWAL_CONSUMER_SECRET='TXOYznfz0qD6DWHWRCU3jUMZL9FhJz00EW8DvqsuRmGP6TghVA'
    TWITTER_WITHDRAWAL_ACCESS_KEY='1230044915414884352-zPqNWtW23H6fxGKywISMS40v4n9vyx'
    TWITTER_WITHDRAWAL_ACCESS_SECRET='Pt6dg4qpvxnNzYzEHVbvoYA9k7UixqVW2jIG1AwSuSJif'
    TWITTER_WITHDRAWAL_BOT_NAME='Exodus68514858'


MUTE_MANAGER_USERNAME = 'mutemanager'


HOOK_DELIVERER = 'main.tasks.deliver_hook_wrapper'

BIG_DEPOSIT_THRESHOLD = 50000
WITHDRAWAL_LIMIT = 1000
TWITTER_WITHDRAWAL_LIMIT = 1
MINIMUM_RAIN_AMOUNT = 500

# pillory settings
INITIAL_MUTE_PRICE = 2083
MUTE_DIMINISHING_RATE = 0.01
UNMUTE_INTEREST = 0.1
DEFAULT_MUTE_TIME = 60 # minutes


CONSTANCE_CONFIG = {
    'DEACTIVATE_WITHDRAWAL': (True, 'True: Disable spice withdrawal, False: Enable spice withdrawal'),
    'DEACTIVATE_DEPOSIT': (True, 'True: Disable spice deposit, False: Enable spice deposit'),
    'DEACTIVATE_TRANSFER': (True, 'True: Disable spice transfer, False: Enable spice transfer'),
    'DEACTIVATE_TIPPING': (True, 'True: Disable spice tipping, False: Enable spice tipping'),
    'DEACTIVATE_RAIN': (True, 'True: Disable spice rain, False: Enable spice rain'),
    'DEACTIVATE_PILLORY': (True, 'True: Disable spice pillory, False: Enable spice pillory'),
    'DEACTIVATE_API_DICEBOT': (True, 'True: Disable dicebot, False: Enable dicebot'),
    'DEACTIVATE_API_PRSBOT': (True, 'True: Disable paperrockscissorbot, False: Enable paperrockscissorbot'),
    'DEACTIVATE_API_TIP': (True, 'True: Disable api for tip, False: Enable api for tip'),
    'DEACTIVATE_API_DEPOSIT': (True, 'True: Disable api for deposit, False: Enable api for deposit'),
    'DEACTIVATE_API_WITHDRAW': (True, 'True: Disable api for withdraw, False: Enable api for withdraw'),
    'DEACTIVATE_API_TRANSFER': (True, 'True: Disable api for transfer, False: Enable api for transfer'),
    'DEACTIVATE_API_METRICS': (True, 'True: Disable api for metrics, False: Enable api for metrics'),
    'DEACTIVATE_API_TRADE': (True, 'True: Disable api for trading, False: Enable api for trading'),
    'DEACTIVATE_SPHERE': (True, 'True: Disable sphere challenges, False: Enable sphere challenges'),
    'DEACTIVATE_BUYING_OF_ORB': (True, 'True: Disable buying of orbs, False: Enable buying of orbs'),
    'AD_FREQUENCY': (25, 'Adjust the frequency of advertisement.'),
    'AD_TEXT': ('', 'Set text to advertise')

}

TXN_OPERATION = {
    'JANKEN': 'janken',
    'WAGER': 'wager',
    'TIP': 'tip',
    'WITHDRAW': 'withdraw',
    'DEPOSIT': 'deposit',
    'RAIN': 'rain',
    'TRANSFER': 'transfer',
    'PILLORY': 'pillory',
    'TRADE': 'trade',
    'TRADE_ORDER': 'trade_order',
    'TRADE_CANCEL': 'trade_cancel',
    'TRADE_EXPIRE': 'trade_expire',
    'SPHERE_CHALLENGE': 'sphere_challenge',
    'EXCHANGE': 'token_exchange'
}

TAX_COLLECTOR_USER_ID = 245316
if DEPLOYMENT_INSTANCE == 'staging':
    TAX_COLLECTOR_USER_ID = 2
    

# SLPNOTIFY_TOKEN = 'e66bb5d6cbe3b17eacecb06394c57590b1b262c1'
WATCHTOWER_SUBSCRIPTION_ENDPOINT = "https://watchtower.cash/api/subscription/"
WATCHTOWER_PROJECT_ID = '0af7eb91-0820-450e-8401-90e4fc5fc203'


AWS_ACCESS_KEY_ID = 'AKIA6COUJK3I5UWAEDE5'
AWS_SECRET_ACCESS_KEY = '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' 
AWS_BUCKET_NAME = 'spice-slp-media'


TELEGRAM_FAUCET_MANAGER = decipher(config("TELEGRAM_FAUCET_MANAGER", default=''))

COINEX_ACCESS_ID = decipher(config('COINEX_ACCESS_ID', default=''))
COINEX_SECRET = decipher(config('COINEX_SECRET', default=''))


SPHERE_SHORT_NAME = decipher(config('SPHERE_SHORT_NAME'))


BRIDGE_SEP20_PRIVATE_KEYS = {
    'spice': decipher(config('BRIDGE_PKS_SPICE_SEP20')),
    'ham': decipher(config('BRIDGE_PKS_HAM_SEP20')),
    'wrs': decipher(config('BRIDGE_PKS_WRS_SEP20')),
    'honk': decipher(config('BRIDGE_PKS_HONK_SEP20')),
    'orb': decipher(config('BRIDGE_PKS_ORB_SEP20')),
    'joy': decipher(config('BRIDGE_PKS_JOY_SEP20')),
    'sbs': decipher(config('BRIDGE_PKS_SBS_SEP20'))
}
